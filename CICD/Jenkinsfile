pipeline {
         agent any
	tools {
 	 maven 'maven latest'
		jdk 'JDK 11'
 	}
	environment {
    PATH = "C:\\WINDOWS\\SYSTEM32"
	}
	//properties([parameters([booleanParam(defaultValue: false, description: 'If You Want Analysis Report', name: 'SonarQube')]), 
	//	    [$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([githubPush(), pollSCM('* * * * *')])])
             stages {
		     stage('build & SonarQube Analysis'){
            steps {
		       notifyBuild('STARTED')
		  //  when {
  //anyOf {
	//  expression { params.SonarQube == true }
//  }
 // beforeInput true
//}
		    withSonarQubeEnv(credentialsId: 'sonar_api_key', installationName: 'My SonarQube Server') {
			    bat 'mvn -f happytrip-code/pom.xml clean package sonar:sonar'
			    bat 'echo "successfully executed"'
		    }
		    bat 'mvn -f happytrip-code/pom.xml clean install'
            }
	}
		     stage('Quality Gate') {
            steps {
		      notifyBuild('STARTED')
                timeout(time: 10, unit: 'MINUTES') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
               stage('Archiving Artifacts') { 
                         steps{ 
				   notifyBuild('STARTED')
                             archiveArtifacts 'happytrip-code/target/**/*'
                         } 
		                       } 
                  stage('Deployment'){
			             steps{
					     notifyBuild('STARTED')
					     timeout(time: 5, unit: 'MINUTES') {
		 input message: 'Do you want to deploy?', submitter: 'ops'
		}
		 deploy adapters: [tomcat9(credentialsId: 'tomcat', path: '', url: 'http://localhost:9080/')], contextPath: 'happytrip', war: '**/*.war' 
         		bat 'echo "Deploying....."'
				     }
		           }
	     }
     post {
        success {
		notifyBuild('SUCCESS')
          }
	failure {
	notifyBuild('FAILED')
  }
    }
}
	def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus = buildStatus ?: 'SUCCESS'

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    colorName = 'yellow'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    colorName = 'green'
    colorCode = '#00FF00'
  } else {
    colorName = 'red'
    colorCode = '#FF0000'
  }
		 // Default values
		  def colorName = 'red' 
 		 def colorCode = '#FF0000'
		def summary = "<p style = "background-color: ${colorName};">${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'</p>"
		def details = """<p>${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at ;<a href="${env.BUILD_URL}"></a>${env.JOB_NAME} [${env.BUILD_NUMBER}];</p>"""
	//emailext body: """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
     //  <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",subject: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",to:'lsaimohith@gmail.com'
   //   recipientProviders: [[$class: '$DEFAULT_REPLYTO']
		emailext body: details,subject: summary,to:'lsaimohith@gmail.com' 
}
