pipeline {
         agent any
             stages {
                 stage('Source') {
                    steps {
                       checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url:' https://github.com/saimohith9/HappyTrip-JAVA.git']]])
			              }        
                 }
stage('build && SonarQube analysis') {
            steps {
                withSonarQubeEnv('My SonarQube Server') {
                    // Optionally use a Maven environment you've configured already
                    withMaven(maven:'Maven latest') {
			sh 'mvn clean install'
                        sh 'mvn clean package sonar:sonar'
			sh 'echo "Successfully executed"'
                    }
                }
            mail to: 'lsaimohith@gmail.com', from: 'lsaimohith@gmail.com',
                subject: "Build: ${env.JOB_NAME} -Success", 
                body: "Dear Team,\nThis is an automated mail to confirm that Release is successfully given for following"${env.JOB_NAME}" build: ${env.BUILD_NUMBER}\n"
            }
        }
stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                waitForQualityGate(webhookSecretId: 'yourSecretID')       
		waitForQualityGate abortPipeline: false
                }
		
            mail to: 'lsaimohith@gmail.com', from: 'lsaimohith@gmail.com',
                subject: "Build: ${env.JOB_NAME} -Success", 
                body: "Dear Team,\nThis is an automated mail to confirm that Release is successfully given for following "${env.JOB_NAME}" build: ${env.BUILD_NUMBER}\n"
            }
        }
               stage('Archiving Artifacts') { 
                         steps{ 
                             archiveArtifacts 'dist/**' 
                         } 
                 } 
                  stage('Deployment'){
			             steps{
         				sh 'echo "Deploying....."'
			             }
		           }
           }
     post {
        success {
            mail to: 'lsaimohith@gmail.com', from: 'lsaimohith@gmail.com',
                subject: "Build: ${env.JOB_NAME} -Success", 
                body: "Dear Team,\nThis is an automated mail to confirm that Release is successfully given for following"${env.JOB_NAME} "build: ${env.BUILD_NUMBER}\n"
        }
failure {
  mail to: 'lsaimohith@gmail.com', 
	subject: 'The Pipeline failed :('
           body: "Dear Team,\nThis is an automated mail to confirm that Release is failed given for following "${env.JOB_NAME} "build: ${env.BUILD_NUMBER}\n"   	
  }
    }
}
