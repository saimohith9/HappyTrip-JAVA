pipeline {
         agent any
	tools {
 	 maven 'maven latest'
		jdk 'JDK 11'
 	}
	environment {
    PATH = "C:\\WINDOWS\\SYSTEM32"
	}
	properties([parameters([booleanParam(defaultValue: false, description: 'If You Want Analysis Report', name: 'SonarQube')]), 
		    [$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([githubPush(), pollSCM('* * * * *')])])
             stages {
		     stage('build & SonarQube Analysis'){
            steps {
		       notifyBuild('STARTED')
		    script{
			    stageName = env.STAGE_NAME
		    when {
  anyOf {
	 expression { params.SonarQube == true }
  }
  beforeInput true
}
		    }
		    withSonarQubeEnv(credentialsId: 'sonar_api_key', installationName: 'My SonarQube Server') {
			    bat 'mvn -f happytrip-code/pom.xml clean package sonar:sonar'
			    bat 'echo "successfully executed"'
		    }
		    bat 'mvn -f happytrip-code/pom.xml clean install'
            }
	}
		     stage('Quality Gate') {
            steps {
		      stageName = env.STAGE_NAME
		      notifyBuild('STARTED')
                timeout(time: 10, unit: 'MINUTES') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
               stage('Archiving Artifacts') { 
                         steps{ 
				   stageName = env.STAGE_NAME
				   notifyBuild('STARTED')
                             archiveArtifacts 'happytrip-code/target/**/*'
                         } 
		                       } 
                  stage('Deployment'){
			             steps{
					       stageName = env.STAGE_NAME
					     notifyBuild('STARTED')
					     timeout(time: 5, unit: 'MINUTES') {
		 input message: 'Do you want to deploy?', submitter: 'ops'
		}
		 deploy adapters: [tomcat9(credentialsId: 'tomcat', path: '', url: 'http://localhost:9080/')], contextPath: 'happytrip', war: '**/*.war' 
         		bat 'echo "Deploying....."'
				     }
		           }
	     }
     post {
        success {
		notifyBuild('SUCCESS')
          }
	failure {
	notifyBuild('FAILED')
  }
    }
}
	def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus = buildStatus ?: 'SUCCESS'
		
		def summary = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
		def details = """<p><b>${buildStatus}</b> : Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
		<p>your job is at this stage: ${stageName}</p>
    <p>Check console output at ${env.BUILD_URL}; ${env.JOB_NAME} [${env.BUILD_NUMBER}];</p>"""
		
		emailext body: details,subject: summary,to:'saimohith49@gmail.com' 
}
