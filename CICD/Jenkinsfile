pipeline {
         agent any
	tools {
  maven 'maven latest'
		jdk 'JDK 11'
 }
             stages {
		     stage('build & SonarQube Analysis'){
            steps {
		    withSonarQubeEnv(credentialsId: 'sonar_api_key', installationName: 'My SonarQube Server') {
			    bat 'mvn -f happytrip-code/pom.xml clean package sonar:sonar'
			    bat 'echo "successfully executed"'
                       // sh 'mvn clean package sonar:sonar'
			// sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.6.0.1398:sonar'
			//    bat 'echo "Successfully executed"'
		    }
		   // script{
		//	    def qg = waitForQualityGate()
		//     timeout(time: 10, unit: 'MINUTES') {
		//	     if(qg.status != 'OK'){
		//		     error "Pipeline aborted due to quality gate failures: ${qg.status}"
		//		     notifyBuild('FAILED')
		//	     }
		 //    }
		 //   }
		    bat 'mvn -f happytrip-code/pom.xml clean install'
		    notifyBuild('STARTED')
            }
	}
		     stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
               stage('Archiving Artifacts') { 
                         steps{ 
                             archiveArtifacts 'happytrip-code/target'
				  notifyBuild('STARTED')
                         } 
		                       } 
		     stage('approval'){
			     steps{
timeout(time: 1, unit: 'HOURS') {
 input message: 'Do you want to deploy?', submitter: 'ops'
}
		     }
		     }
                  stage('Deployment'){
			             steps{
					     deploy adapters: [tomcat9(credentialsId: '561d4fa6-b714-4cc4-9054-df5cd511c198', path: '', url: 'https://localhost:9080')], contextPath: 'happytrip', war: '**/*.war'
         				sh 'echo "Deploying....."'
					      notifyBuild('STARTED')
				     }
		           }
	     }
     post {
        success {
		notifyBuild('SUCCESS')
          }
failure {
	notifyBuild('FAILED')
  }
    }
}
	def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus = buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    colorName = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    colorName = 'GREEN'
    colorCode = '#00FF00'
  } else {
    colorName = 'RED'
    colorCode = '#FF0000'
  }
	emailext (
      subject: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
      body: """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
      recipientProviders: [[$class: 'DevelopersRecipientProvider']]
    )
}
